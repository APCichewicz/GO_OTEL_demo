// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :one
delete from users where id = $1 returning id, email, name, password, oauth_provider, oauth_id
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, email, name, password, oauth_provider, oauth_id from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Password,
			&i.OauthProvider,
			&i.OauthID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, name, password, oauth_provider, oauth_id from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, email, name, password, oauth_provider, oauth_id from users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const getUserByOAuth = `-- name: GetUserByOAuth :one
select id, email, name, password, oauth_provider, oauth_id from users where oauth_provider = $1 and oauth_id = $2
`

type GetUserByOAuthParams struct {
	OauthProvider pgtype.Text
	OauthID       pgtype.Text
}

func (q *Queries) GetUserByOAuth(ctx context.Context, arg GetUserByOAuthParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByOAuth, arg.OauthProvider, arg.OauthID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, email, name, password, oauth_provider, oauth_id from users where name = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const insertOAuthUser = `-- name: InsertOAuthUser :one
insert into users (email, name, oauth_provider, oauth_id) values ($1, $2, $3, $4) returning id, email, name, password, oauth_provider, oauth_id
`

type InsertOAuthUserParams struct {
	Email         string
	Name          string
	OauthProvider pgtype.Text
	OauthID       pgtype.Text
}

func (q *Queries) InsertOAuthUser(ctx context.Context, arg InsertOAuthUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertOAuthUser,
		arg.Email,
		arg.Name,
		arg.OauthProvider,
		arg.OauthID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
insert into users (email, name, password) values ($1, $2, $3) returning id, email, name, password, oauth_provider, oauth_id
`

type InsertUserParams struct {
	Email    string
	Name     string
	Password pgtype.Text
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Email, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users set email = $1, name = $2, password = $3 where id = $4 returning id, email, name, password, oauth_provider, oauth_id
`

type UpdateUserParams struct {
	Email    string
	Name     string
	Password pgtype.Text
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.OauthProvider,
		&i.OauthID,
	)
	return i, err
}
